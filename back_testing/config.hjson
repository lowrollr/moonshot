{
    # All possible pairs of the given quote/base currencies 
    # will be fetched from the historical data repository

    # directory to pull data from
    data_source: "binance",
    starting_cash: 30000.00,
    # Currencies to trade against Tether (USDT)
    // currencies: ['ALGO', 'ATOM',  'BAND', 'BNB', 'DASH', 'DOGE', 'ENJ', 'EOS', 'ETC', 'ETH', 'ICX', 'IOTA', 'LINK', 'LTC', 'MATIC', 'NANO', 'NEO', 'OMG', 'ONE', 'ONT', 'QTUM', 'RVN', 'VET', 'WAVES', 'XLM', 'XRP', 'XTZ', 'ZEC', 'ZIL', 'ZRX'],    
    currencies: ['all', 'BTC']
    # Whether or not to daisy chain all data chunks for a particular coin
    daisy_chain: true,
    # If daisy_chain is false, the user must specify a chunk id to run on. Indexed at 1
    chunk_ids: [1],
    # Whether or not to test ranges of values for each indicator parameter (genetic algo)
    test_param_ranges: false,
    # Timespan to fetch data for
    # "max" = all data
    # ["2020.1.1", "2020.2.1"] = data for Jan. 1, 2020 to Feb. 1, 2020 (Inclusive)
    # ["2020.1.1"] = data for Jan. 1, 2020 forwards
    timespan: ['1593322559999'],
    # Candle frequency to retrieve 
    # 1 = 1 minute
    freq: 1,
    # determining if we are testing on a genetic algorithm or just a single run through
    genetic: false,
    # Fees to subtract from trades (percentage)
    // fees: 0.001,
    fees: "coinbase",
    #maker or taker fees
    makerTaker: "taker",
    # Strategoes to execute (file name sans version no.)
    scale: true,

    strategies: [{
                    type: 'atlas',
                    version: 'latest',
                    entry_models: [
                        {
                            name: 'strawmaker',
                            version: 'latest'
                        }
                    ],
                    exit_models: [

                    ]
                }]

    # How long to wait before trading
    padding: 1000,

    # Version of strategy
    # specifying latest will just grab the highest version number present
    # Indicators to plot on the results graph
    indicators_to_graph: [],
    # Whether or not results should be plotted
    plot: true,
    # Slippage to factor into profits
    slippage: 0,
    # Report movement plots as individual pages or embedded divs (choose 'pages', 'divs', or 'auto')
    report_format: "auto"
}